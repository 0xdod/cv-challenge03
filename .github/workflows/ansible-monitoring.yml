name: Deploy monitoring stack with ansible
on:
  workflow_run:
    workflows: [Terraform Apply]
    types: [completed]
    branches: [infra_main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_branch }}

      - name: Install Ansible
        shell: bash
        run: |
          sudo apt update
          sudo apt install -y ansible
      - name: Decode and Save PEM File
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" | base64 --decode > ec2-key.pem
          chmod 400 ec2-key.pem
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Download Terraform Output
        uses: actions/github-script@v6
        with:
          script: |
            let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
             owner: context.repo.owner,
             repo: context.repo.repo,
             run_id: context.payload.workflow_run.id,
            });
            let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "terraform-output"
            })[0];
            let download = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: matchArtifact.id,
              archive_format: 'zip',
            });
            const fs = require('fs');
            const path = require('path');
            const temp = '${{ runner.temp }}/artifacts';
            if (!fs.existsSync(temp)){
              fs.mkdirSync(temp);
            }
            fs.writeFileSync(path.join(temp, 'output.zip'), Buffer.from(download.data));

      - name: "Unzip downloaded artifact"
        run: unzip "${{ runner.temp }}/artifacts/output.zip" -d $GITHUB_WORKSPACE

      - name: Run ansible playbook
        run: |
          public_ip=$(cat ./public_ip.txt)
          instance_id=$(cat ./instance_id.txt)
          echo "Instance ID: $instance_id"
          echo "Public IP: $public_ip"
          printf "[web_servers]\n$public_ip ansible_user=ubuntu ansible_ssh_private_key_file=ec2-key.pem" > inventory.ini
          aws ec2 wait instance-status-ok --instance-ids $instance_id 
          ansible-playbook -i inventory.ini ansible/deploy_monitoring_stack.yml
